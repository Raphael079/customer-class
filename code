// BankCustomer superclass
class BankCustomer {
    private String name;
    private String accountNumber;
    protected double balance;

    // Constructor
    public BankCustomer(String name, String accountNumber, double balance) {
        this.name = name;
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    // Methods
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println(amount + " deposited successfully.");
        } else {
            System.out.println("Invalid amount. Deposit failed.");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println(amount + " withdrawn successfully.");
        } else {
            System.out.println("Insufficient balance or invalid amount. Withdrawal failed.");
        }
    }

    public void displayBalance() {
        System.out.println("Current balance for " + name + ": " + balance);
    }
}

// JohnKamau subclass inheriting BankCustomer
class JohnKamau extends BankCustomer {
    private String loanType;

    // Constructor
    public JohnKamau(String name, String accountNumber, double balance, String loanType) {
        super(name, accountNumber, balance);
        this.loanType = loanType;
    }

    // Method overriding
    @Override
    public void displayBalance() {
        System.out.println("John Kamau's current balance: " + balance);
    }

    // Method specific to JohnKamau
    public void applyForLoan(double amount) {
        System.out.println("Loan applied by John Kamau of type " + loanType + " for amount " + amount);
    }
}

// DavidJuma subclass inheriting BankCustomer
class DavidJuma extends BankCustomer {
    private int creditScore;

    // Constructor
    public DavidJuma(String name, String accountNumber, double balance, int creditScore) {
        super(name, accountNumber, balance);
        this.creditScore = creditScore;
    }

    // Method overriding
    @Override
    public void displayBalance() {
        System.out.println("David Juma's current balance: " + balance);
    }

    // Method specific to DavidJuma
    public void checkCreditScore() {
        System.out.println("Credit score of David Juma: " + creditScore);
    }
}

// Main class
public class BankApplication {
    public static void main(String[] args) {
        // Creating objects
        JohnKamau john = new JohnKamau("John Kamau", "ACC001", 5000.0, "Personal Loan");
        DavidJuma david = new DavidJuma("David Juma", "ACC002", 8000.0, 750);

        // Using polymorphism
        BankCustomer customer1 = john;
        BankCustomer customer2 = david;

        // Accessing methods
        customer1.deposit(2000.0);
        customer2.withdraw(3000.0);

        // Displaying balances
        john.displayBalance();
        david.displayBalance();

        // Applying for loan and checking credit score
        john.applyForLoan(10000.0);
        david.checkCreditScore();
    }
}
